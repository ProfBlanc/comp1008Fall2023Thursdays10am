// Online Java Compiler
// Use this editor to write, compile and run your Java code online



/*

    inheritance
        building something based on something esle
        create a class based on another class
        
        OLD                 NEW
        
        base                derived
        parent              child
        super               sub
        
        what is inherited
            non-private entities
                methods, instance variables
        
            constructors
                only default constructor
        
        why?
            create something, newer
                more precise
    
    
    Animal
        
*/

class Animal{
    private int heartbeat;
    private int legs;
    String aVariable;

    public void setLegs(int legs){
        this.legs = legs;
    }
    public void setHeartbeat(int heartbeat){
        this.heartbeat = heartbeat;
    }
    public int getHeartbeat(){
        return heartbeat;
    }
    public int getLegs(){
        return legs;
    }
    
    public Animal(){}
    public Animal(int legs){
        setLegs(legs);
        
    }
    public Animal(int heartbeat, int legs){
        setHeartbeat(heartbeat);
        setLegs(legs);
    }
    
    public String toString(){
        return String.format("Heartbeat = %d, Legs = %d", heartbeat, legs);
    }
}

class Cat extends Animal{
    
    private double tailLength;
    public void setTailLength(double tailLength){
        this.tailLength = tailLength;
    }
    public double getTailLength(){
        return tailLength;
    }
    
    public int getLegs(){
        return 9876;
    }
    public Cat(){}
    public Cat(int hb, int legs){
        super(hb, legs);
    }
    //annotation: speaks to compiler
    //checks if method signature/header 
    //matches any super class method signature
   @Override
    public void setHeartbeat(int hb){
        //this.aVariable = String.valueOf(hb);
        if(hb > 80)
            throw new IllegalArgumentException("Heartbeat value too big");
        
        super.setHeartbeat(hb);
    }
}

class Lion extends Cat{
    private double teeth;
    public void setTeeth(double teeth){
        this.teeth = teeth;
    }
    public double getTeeth(){
        return teeth;
    }
    
    public int getLegs(){
        
        return 12345;
    }
}
class Canine extends Animal{
    String color = "";
    private double weight;
    private double height;
    
    public double getHeight(){
        return height;
    }
    public double getWeight(){
        return weight;
    }
    public void setHeight(double h){
        height = h;
    }
    public void setWeight(double w){
        weight = w;
    }
    public Canine(){}
    public Canine(int heartbeat, int legs){
        super(heartbeat, legs);
    }
        public Canine(int heartbeat, int legs, double h, double w){
            
            super(heartbeat, legs);
            setWeight(w);
            setHeight(h);
}

@Override
public String toString(){
    return super.toString() + String.format(", Height = %.1f,Weight = %.1f", height, weight);
}
}
/*

Object   Animal      Cat         Lion

overriding: create a brand new implementation.
overloading: creating a new variation
*/

class Student{
    public String name = "Student";
    protected int studentID, age;
    private double grade;
    
public double getGrade(){return grade;  }
public int getAge(){return age;}
public void setAge(int age){
this.age = age > 0 && age <= 100 ? age: 0;
}
public void setGrade(double grade){
this.grade = grade > 0 && grade <= 100 ? grade: 0;
}

public Student(){}
public Student(String name, int studentID, int age,double grade){
    this.name = name;
    this.studentID = studentID;
    setGrade(grade);
    setAge(age);
}
}

class HonorRollStudent extends Student{
    String prizes = "";
    public HonorRollStudent(){}
    public HonorRollStudent(String name, int studentID, int age, double grade){
        super(name, studentID, age, grade);
    }
public HonorRollStudent(String name, int studentID, int age, double grade, String prizes){
        super(name, studentID, age, grade);
        this.prizes = prizes;
    }
    
@Override
public double setGrade(double grade){
    if(grade < 80)
    throw new IllegalArgumentException("Grade must be at least 80%");
    
    super.setGrade(grade);
}
}

class HelloWorld {
    static void example1(){
                Animal a1 = new Animal();
        //toString(), equals(), hashCode(), getClass()
        
        Lion l = new Lion();
        System.out.println(l);
        
        Animal a2 = new Lion();
        Object o = "hello";
        
        System.out.println(l.getLegs());
        Animal a3 = new Animal();
        System.out.println(a3.getLegs());
        System.out.println(a2.getLegs()); 
    }
    static void example2(){
        Animal[] animals = {new Lion(), new Cat(), new Animal()};
        
        System.out.println(animals[0].getLegs());
    }
    static void example3(){
        
        Animal a1 = new Animal(100, 4);
        Cat c1 = new Cat();
        Cat c2 = new Cat(80, 4);
    }
         static void example4(){
         Canine c = new Canine();
         System.out.println(c);
     }
     static void example5(){
        Animal[] animals = {new Lion(), new Canine(), new Animal(), new Cat()};
        
        for(Animal a : animals){
            System.out.println(a.getClass().getName() + "--" + a);
        }
     }
    public static void main(String[] args) {
        example5();
   }
}
